@model Inspinia_MVC5_SeedProject.Models.Ad

@{
    ViewBag.Title = "Create";
}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-sm-4">
        <h2>Create</h2>
        <ol class="breadcrumb">
            <li>
                @Html.ActionLink("List", "Index")
            </li>
            <li class="active">
                <strong>Create</strong>
            </li>
        </ol>
    </div>
    <div class="col-sm-8">
        <div class="title-action">
			@Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary"})
        </div>
    </div>
</div>


<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-md-6">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Create Ad</h5>
                </div>
                <div class="ibox-content">

                    @using (Html.BeginForm("CreateCarAd", "Vehicles", FormMethod.Post, new { id = "form" }))
                    {
                        @Html.AntiForgeryToken()

                        <div class="form-horizontal">
                            @Html.ValidationSummary(true)
                            <div class="form-group">
                                <label class="control-label col-md-2">Select Brand</label>
                                <div class="col-md-10">
                                    <select id="select-brand" required class="demo-default" name="brand" data-bind="options: availableBrands,
                       value: selectedBrand,
                       optionsCaption: 'Choose brand...'"></select>
                                </div>
                            </div>
                            <div data-bind="with:selectedBrand">
                                <div class="form-group">
                                    <label class="control-label col-md-2">Select Model</label>
                                    <div class="col-md-10">
                                        <select id="select-model" required class="demo-default" name="model" data-bind="options: $parent.availableModels,
                       value: $parent.selectedModel,
                       optionsCaption: 'Choose model...'"></select>
                                    </div>
                                </div>
                            </div>



                            <div class="form-group">
                                <label class="control-label col-md-2">Year</label>
                                <div class="col-md-10">
                                    <select id="select-year" required class="demo-default" name="year" data-bind="options: years,
                        value: selectedYear,
                       optionsCaption: 'Choose year...'"></select>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-2">KM Driven</label>
                                <div class="col-md-10">
                                    <div class="input-group m-b">
                                        <input type="number" class="form-control"  name="kmDriven" /><span class="input-group-addon">Km</span>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-2">Fuel type</label>
                                <div class="col-md-10">
                                    <select id="select-fuelType" name="fuelType" required placeholder="choose fuel type">
                                        <option value="">Choose fuel type</option>
                                        <option value="CNG">CNG</option>
                                        <option value="Diesel">Diesel</option>
                                        <option value="Electric">Electric</option>
                                        <option value="Hybrid">Hybrid</option>
                                        <option value="LPG">LPG</option>
                                        <option value="Petrol">Petrol</option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-2">Color</label>
                                <div class="col-md-10">
                                    <select id="select-color" name="color" required placeholder="choose color">
                                        <option value="">Choose color</option>
                                        <option value="white">White</option>
                                        <option value="Black">Black</option>
                                        <option value="Yellow">Yellow</option>
                                        <option value="Red">Red</option>
                                        <option value="Blue">Blue</option>
                                        <option value="Orange">Orange</option>
                                        <option value="Purple">Purple</option>
                                        <option value="Violet">Violet</option>
                                        <option value="Green">Green</option>
                                        <option value="Golden">Golden</option>
                                        <option value="Gray">Gray</option>
                                    </select>
                                </div>
                            </div>
                            @Html.Partial("~/Views/Shared/_CreateAd.cshtml")

                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" value="Create" class="btn btn-primary" />
                                    @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-white" })
                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>
    </div>
 </div>

 
@section Styles {

    @Styles.Render("~/plugins/toastrStyles")
    @Styles.Render("~/Content/plugins/iCheck/iCheckStyles")
    @Styles.Render("~/Scripts/plugins/jquery-ui/jqueryuiStyles")
    @Styles.Render("~/scripts/selectizeStyles")
}

@section Scripts {

    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/plugins/validate")
    @Scripts.Render("~/plugins/knockout")
    @Scripts.Render("~/plugins/iCheck")
    @Scripts.Render("~/scripts/selectize")
    @Scripts.Render("~/plugins/toastr")
    @Scripts.Render("~/plugins/autosize")
    <script type="text/javascript">

        function ViewModel() {
            var self = this;
            self.conditionChecked = ko.observable(false);
            self.selectedVal = ko.observable();
            self.selectedVal.subscribe(function (val) {
                if (val == "fixedPrice") {
                    self.isAllowBidingChecked(false);
                    self.isFixPriceChecked(true);
                }
                else {
                    self.isAllowBidingChecked(true);
                    self.isFixPriceChecked(false);
                }
            });
            self.years = ko.observableArray();
            self.loadYears = function () {
                var firstYear = 1990;
                var currentYear = new Date().getFullYear();
                for (var x = firstYear; x <= currentYear; x++) {
                    self.years.push(x);
                }
                
            }
            self.selectedYear = ko.observable();
            self.isNewBrand = ko.observable(false);
            self.availableBrands = ko.observableArray();
            self.selectedBrand = ko.observable();
            self.selectedModel = ko.observable();
            var sub = self.selectedBrand.subscribe(function (value) {
                self.loadModels();
            })
            self.isAllowBidingChecked = ko.observable(false);
            self.isFixPriceChecked = ko.observable(false);

            

            self.loadBrands = function () {
                $.ajax({
                    url: '/api/Vehicle/GetCarBrands',
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'POST',
                    success: function (data) {
                        $.each((data), function (i, item) { self.availableBrands.push(item) });
                        $('#select-brand').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 29,
                            option_add: newBrandAdded,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },
                            onOptionAdd: function (value, data) { self.isNewBrand(true); }
                        });
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load Brands.Please refresh page and try again", "Error");
                    }
                });
            }
            function newBrandAdded() {
                alert("new ");
            }
            self.availableModels = ko.observableArray();
            self.selectedModel = ko.observable();
            self.loadModels = function () {
                self.availableModels.removeAll();
                $.ajax({
                    url: '/api/Vehicle/GetCarModels?brand=' + self.selectedBrand(),
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'POST',
                    success: function (data) {
                        $.each((data), function (i, item) { self.availableModels.push(item) });
                        $('#select-model').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 29,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },
                        });
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load Models.Please refresh page and try again", "Error");
                    }
                });
            }
            self.loadBrands();
            self.loadYears();
        }
        ko.bindingHandlers.jqAutoresize = {
            init: function (element, valueAccessor, aBA, vm) {
                if (!$(element).hasClass('msgTextArea')) {
                    $(element).css('height', '1em');
                }
                $(element).autosize();
            }
        };
        ko.bindingHandlers.iCheck = { // integrating icheck plugin using bh
            init: function (element, valueAccessor) {
                //initialize icheck to the element
                $(element).iCheck({
                    radioClass: 'iradio_square-green'
                });
                $(element).on('ifChecked', function (event) {
                    var observable = valueAccessor();
                    observable.checked(event.target.defaultValue); //assigning selected value
                });
            }
        };

        $(document).ready(function () {
            ko.applyBindings(new ViewModel);

            Selectize.define('inputMaxlength', function (options) {
                var self = this;
                this.setup = (function () {
                    var original = self.setup;
                    return function () {
                        original.apply(this, arguments);
                        this.$control_input.attr('maxlength', this.settings.inputMaxlength);
                    };
                })();
            });

            //$('#input-tags').selectize({
            //    persist: false,
            //    createOnBlur: true,
            //    create: true,
            //    maxItems: 4
            //});
            $('#select-color').selectize({
                create: true,
                plugins: ['inputMaxlength'],
                inputMaxlength: 19,
                sortField: {
                    field: 'text',
                    direction: 'asc'
                },
            });
            
            $('#select-sims').selectize({
                sortField: {
                    field: 'text',
                    direction: 'asc'
                },
            });
            $('#select-year').selectize({
                sortField: {
                    field: 'text',
                    direction: 'asc'
                },
            });
            $('#select-fuelType').selectize();
            $("#form").validate({
                ignore: ':hidden:not([class~=selectized]),:hidden > .selectized, .selectize-control .selectize-input input',
                rules: {
                    title: {
                        required: true,
                        maxlength: 50,
                        minlength: 15
                    },
                    company: {
                        required: true,
                        maxlength: 15
                    },
                    model: {
                        required: true,
                        maxlength: 20
                    },
                    description: {
                        required: true,
                        minlength: 25,
                        maxlength: 1000
                    },
                    color: {
                        required: true,
                        maxlength: 20
                    },
                    price: {
                        number: true
                    },
                    kmDriven: {
                        required: true
                    }
                }
            });
            $('.i-check').iCheck({
                checkboxClass: 'icheckbox_square-green',
                radioClass: 'iradio_square-green',
            });

        });
    </script>
}
