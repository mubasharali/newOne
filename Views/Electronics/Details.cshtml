@{
    ViewBag.Title = "Details";
}
<input type="hidden" id="adId" value="@ViewBag.adId" />
<input type="hidden" id="currentPage" value="@HttpContext.Current.Request.Url.AbsolutePath" />
<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-sm-4">
        <h2>Details</h2>
        <ol class="breadcrumb">
            <li>
                @Html.ActionLink("List", "Index")
            </li>
            <li class="active">
                <strong>Details</strong>
            </li>
        </ol>
    </div>
</div>


<style>
    .carouselContainer {
        overflow: visible;
        //height:350px;
    }

        .carouselContainer img {
           // height: 350px;
           height:auto;
           width:100%;
        }
</style>

<div class="wrapper wrapper-content animated fadeInRight">

    <div class="row">
        <div class="col-sm-3 hidden-sm hidden-xs">@Html.Partial("~/Views/Shared/_Tree.cshtml")</div>
        <div class="col-md-9" id="adsBinding">
            <div data-bind="visible:error()" class="alert alert-success">
                <strong>Error! </strong><span data-bind="text:error"></span>
            </div>
            <div data-bind="foreach: showAds">
                <div data-bind="visible:statusError" class="alert alert-success">
                    <strong>Pending admin approval! </strong><span data-bind="text:statusError"></span>
                </div>

                <div data-bind="visible:isVisible">
                    <input type="hidden" id="loginUserId" data-bind="value:loginUserId" />

                    <div data-bind="attr:{'id':id}">
                        <div class="ibox product-detail">
                            <div class="ibox-content">

                                <div class="row">
                                    <div class="lightBoxGallery">

                                        <div class="col-md-5 col-sm-7">

                                            <div class="carouselContainer">
                                                <div><span data-bind="text:images().length"></span>  images attched with this ad</div>
                                                
                                                <div id="gallery" data-gallery=""
                                                     data-bind="slick: images,
                slickOptions: {dots:true, initialSlide:0},
                slickIndex: imageIndex">
                                                </div>
                                                <div data-bind="visible:images().length == 0">Display your banner ad here</div>
                                            </div>
                                            

                                        </div>
                                        <div class="col-sm-5 hidden-lg hidden-md hidden-xs">Display your banner ad here</div>
                                    </div>
                                    <div class="col-md-7 col-sm-12">
                                        <span data-bind="visible:loginUserId == postedById">
                                            <a data-bind="click: function(){return deleteAd(id)}" class="btn btn-white btn-xs pull-right confirmDelete"> Delete</a><a data-bind="click: function(){return editAd(id)}" class="btn btn-white btn-xs pull-right"> Edit</a>
                                        </span>
                                        <h2 data-bind="text:title" class="font-bold m-b-xs"></h2>
                                        <ul class="tag-list" data-bind="foreach:showTags" style="padding: 0">
                                            <li><a href=""><i class="fa fa-tag"></i>&nbsp; <span data-bind="text:name"></span> </a></li>
                                        </ul><br /><br />
                                        <hr>
                                        <span data-bind="if:isBidingAllowed">
                                            <button data-bind="click:placeBidButton" class="btn btn-primary pull-right">Place Bid</button>
                                        </span>
                                        <span data-bind="if:!isBidingAllowed">
                                            <button data-bind="" class="btn btn-primary pull-right">Chat with seller</button>
                                        </span>
                                        <h1 class="product-main-price">
                                            <span data-bind="if:!isBidingAllowed">
                                                <span data-bind="if:price">
                                                    <span data-bind="text:price"></span> <small style="font-size:13px" class="text-muted">Rs. <span data-bind="html:isNegotiable"></span></small>
                                                </span>
                                                <span data-bind="if:!price">Price on contact</span>
                                            </span>
                                            <span data-bind="if:isBidingAllowed">
                                                <span data-bind="if:price">
                                                    <span data-bind="if:highestBid() == '-Infinity'">
                                                        <span data-bind="text:price"></span> <small style="font-size:13px" class="text-muted ">Rs. (Initial Bid) </small>
                                                    </span>
                                                    <span data-bind="ifnot:highestBid() == '-Infinity'">
                                                        <span data-bind="text:highestBid"></span> <small style="font-size:13px" class="text-muted ">Rs. (current Bid) Initial Bid = <span data-bind="text:price"></span> </small>
                                                    </span>
                                                </span>
                                                <span data-bind="if:!price">
                                                    <span data-bind="if:highestBid() == '-Infinity'">
                                                        No Bit yet
                                                    </span>
                                                    <span data-bind="ifnot:highestBid() == '-Infinity'">
                                                        <span data-bind="text:highestBid"></span> <small style="font-size:13px" class="text-muted ">Rs. (current Bid) </small>
                                                    </span>
                                                </span>
                                            </span>
                                        </h1>
                                        <hr>
                                        <dl class="dl-horizontal m-t-md small">
                                            <dt>condition:</dt>
                                            <dd data-bind="text:condition"></dd>
                                            <dt>Tye:</dt>
                                            <dd data-bind="text:type"></dd>
                                            <span data-bind="with: showMobileAd">
                                                <dt data-bind="with:brand">Brand:</dt>
                                                <dd data-bind="text:brand"></dd>
                                                <dt data-bind="with:model">Model:</dt>
                                                <dd data-bind="text:model"></dd>
                                                <dt data-bind="with:color">color:</dt>
                                                <dd data-bind="text:color"></dd>
                                                <span data-bind="if:sims">
                                                    <dt>Number of sims:</dt>
                                                    <dd data-bind="text:sims"></dd>
                                                </span>

                                            </span>
                                        </dl>
                                        <div data-bind="foreach: showCarAd">
                                            <hr>
                                            <dl class="dl-horizontal m-t-md small">
                                                <dt>Brand:</dt>
                                                <dd data-bind="text:brand"></dd>
                                                <dt>Model:</dt>
                                                <dd data-bind="text:model"></dd>
                                                <dt>color:</dt>
                                                <dd data-bind="text:color"></dd>
                                                <dt>condition:</dt>
                                                <dd data-bind="text:condition"></dd>
                                                <dt>Fuel type</dt>
                                                <dd data-bind="text:fuelType"></dd>
                                                <dt>Km Driven</dt>
                                                <dd data-bind="text:kmDriven"></dd>
                                                <dt>Year</dt>
                                                <dd data-bind="text:year"></dd>
                                            </dl>
                                        </div>

                                        <h4>Details</h4>
                                        <div data-bind="text:description" class="small text-muted">
                                        </div>

                                        <div data-bind="with:showLocation">
                                            <h5 data-bind="with:cityName">Location</h5>
                                            <span data-bind="if:exectLocation">
                                                <span data-bind="text:exectLocation"></span>,
                                            </span>
                                            <span data-bind="if:popularPlace">
                                                <span data-bind="text:popularPlace"></span>,
                                            </span>
                                            <span data-bind="text:cityName"></span>
                                        </div>
                                        <br />
                                        <div class="text-right">
                                            <div class="btn-group">
                                                <button data-bind="click:saveAd" class="btn btn-white btn-sm"><i data-bind="style:{color: isSaved()? 'red' : 'gray'}" class="fa fa-star"></i> <span data-bind="visible:isSaved()"> Remove from</span><span data-bind="visible:!isSaved()"> Add to</span>  wishlist </button>
                                                <a data-bind="attr:{href:sellerProfile}" class="btn btn-white btn-sm"><i class="fa fa-user"></i> Seller profile (<span data-bind="text:postedByName"></span> )</a>
                                            </div>
                                        </div>


                                    </div>
                                </div>

                            </div>
                            <div class="ibox-footer">
                                <span class="pull-right">
                                    <i class="fa fa-clock-o"></i> <span data-bind="text:time"></span>
                                </span>
                                Views (<span data-bind="text:views"></span>) -  wishlist (<span data-bind="text:savedCount"></span> ) - <span data-toggle="modal" data-target="#report"><span data-bind="style:{color: isReported()? 'red' : 'gray'}"> <i class="fa fa-flag"></i> </span> Report </span>(<span data-bind="text:reportedCount()"></span>)




                                <div data-bind="visible:isBidingAllowed">
                                    <hr />
                                    <h2>Bidings:</h2>
                                    <div data-bind="visible:placeBid">
                                        <div class="form-group">
                                            <div class="row">
                                                <label class="control-label col-sm-2">Bid amount</label>
                                                <div class="col-sm-8">
                                                    <div class="input-group m-b">
                                                        <span class="input-group-addon">Rs</span><input type="number" placeholder="place bid.." data-bind="value:newBidPrice" class="form-control" pattern="[0-9]*" name="price" required />
                                                    </div>
                                                </div>
                                                <div class="col-sm-2"><button class="btn btn-success" data-bind="click:postBid">Submit</button></div>
                                            </div>
                                        </div>

                                    </div>
                                    <span data-bind="text:showBidings().length"></span> bidings
                                    <ul class="sortable-list connectList agile-list" data-bind="foreach:showBidings">
                                        <li class="success-element">
                                            <span data-bind="visible:!isEditing()">
                                                <a href="#"><span data-bind="text:postedByName"></span></a>
                                                <strong class="col-xs-offset-3"> <span data-bind="text:price"></span></strong>
                                                <div class="agile-detail">
                                                    <a data-bind="click:$parent.deleteBid" class="pull-right btn btn-xs btn-white">delete</a><a data-bind="click:editBidButton" class="pull-right btn btn-xs btn-white">edit</a>
                                                    <i class="fa fa-clock-o"></i> <span data-bind="text:time"></span>
                                                </div>
                                            </span>
                                            <span data-bind="visible:isEditing()">
                                                <div class="input-group m-b">
                                                    <span class="input-group-addon">Rs</span><input type="number" data-bind="value:price" class="form-control" pattern="[0-9]*" name="price" required />
                                                </div>
                                                <button class="btn btn-success" data-bind="click:function(){return updateBid($parent.id)}">Update</button>
                                            </span>
                                        </li>
                                    </ul>

                                </div>
                            </div>
                            <div class="">
                                @Html.Partial("~/Views/Shared/_Comments.cshtml")
                            </div>
                        </div>
                    </div>
                    <div class="modal inmodal fade" id="report" tabindex="-1" role="dialog" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content animated ">
                                <div class="modal-header">
                                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                                    <i class="fa fa-flag modal-icon"></i>
                                    <h4 class="modal-title">Report Ad</h4>
                                    <small class="font-bold">Make sure you have provided right information or you can loose reputation</small>
                                </div>
                                <div class="modal-body">
                                    <div class="form-group">
                                        <div class="col-sm-offset-3 ">
                                            <div class="radio">
                                                <label>
                                                    <input class="radio i-checks" type="radio" data-bind=" checked: selectedVal " name="report" value="duplicate" required /> Ad is duplicate
                                                </label>
                                            </div>
                                            <div class="radio">
                                                <label>
                                                    <input class="radio i-checks" type="radio" data-bind="checked: selectedVal " name="report" value="wrong_category" required /> Wrong category
                                                </label>
                                            </div>
                                            <div class="radio">
                                                <label>
                                                    <input class="radio i-checks" type="radio" data-bind="checked: selectedVal " name="report" value="Irrelevent_content" required /> Irrelevent content
                                                </label>
                                            </div>
                                            <div class="radio">
                                                <label>
                                                    <input class="radio i-checks" type="radio" data-bind="checked: selectedVal " name="report" value="spam" required /> Spam/Offensive content
                                                </label>
                                            </div>
                                            <div class="radio">
                                                <label>
                                                    <input class="radio i-checks" type="radio" data-bind="checked: selectedVal" name="report" value="fraud" required /> Fraud reason
                                                </label>
                                            </div>
                                        </div>
                                        <label>Addational details:</label>
                                        <textarea class="msgTextArea form-control" placeholder="Addational info.." data-bind="jqAutoresize: {},value:reportText"></textarea>

                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-white" data-dismiss="modal">I didn't mean to</button>
                                    @*<span data-bind="text:$parent.id"></span>*@
                                    @*<span data-bind="text:loginUserId"></span>*@
                                    <button type="button" data-bind="click: function(){ return report()}" class="btn btn-primary">Submit</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        

    </div>
    
</div>

@Html.Partial("/Views/Shared/_Chat.cshtml")
@Html.Partial("~/Views/Shared/_UserLogin.cshtml")

@section Styles {
    @Styles.Render("~/plugins/slickStyles")
    @Styles.Render("~/plugins/slickThemeStyles")
    @Styles.Render("~/plugins/toastrStyles")
    @Styles.Render("~/Content/plugins/jsTree")
@Styles.Render("~/plugins/sweetAlertStyles")
}


@section Scripts{
    @Scripts.Render("~/plugins/toastr")
    @Scripts.Render("~/plugins/timeago")
    @Scripts.Render("~/plugins/autosize")
    @Scripts.Render("~/plugins/knockout")
    @Scripts.Render("~/plugins/slick")
    @Scripts.Render("~/plugins/jsTree")
    @Scripts.Render("~/bundles/categoryTree")
@Scripts.Render("~/bundles/jqueryui")
@Scripts.Render("~/plugins/sweetAlert")
<script src="~/Scripts/jquery.signalR-2.2.0.js"></script>
<script src="~/signalr/hubs"></script>
<script src="~/Scripts/UserLogin.js"></script>
<script src="~/Scripts/app/chat.js"></script>
<script src="~/Scripts/_Comments.js"></script>
    <script>
        var myAdId = $("#adId").val();
        function Biding(data) {
            var self = this;
            data = data || {};
            self.postedById = data.postedById;
            self.postedByName = data.postedByName;
            self.postedByLink = '/Images/Users/p' + self.postedById;
            self.exectTime = data.time;
            self.time = getTimeAgo(data.time);
            self.id = data.id;
            self.price = ko.observable( data.price);
            self.isEditing = ko.observable(false);
            self.editBidButton = function () {
                self.isEditing(true);
            }
            self.updateBid = function (adId) {
                self.time = self.exectTime;
                self.postedBy = self.postedById;
                self.adId = adId;
                $.ajax({
                    url: '/api/Electronic/UpdateBid',
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'POST',
                    data: ko.toJSON(self),
                    success: function (data) {
                        self.isEditing(false);
                    },
                    error: function () {
                        toastr.error("failed to update comment", "Error!");
                    }
                });
            }
        }
        function CarAd(data) {
            var self = this;
            data = data || {};
            self.fuelType = data.fuelType;
            self.year = data.year;
            if (data.condition == "n") {
                self.condition = "New";
            } else if (data.condition == "u") {
                self.condition = "Used";
            } else if (data.condition == "b") {
                self.condition = "unBoxed";
            }
            self.color = data.color;
            self.brand = data.brand;
            self.model = data.model;
            self.kmDriven = data.kmDriven;
        }
        function mobilead(data) {
            var self = this;
            data = data || {};
            self.color = data.color;
            
            self.sims = data.sims;
            self.brand = data.brand;
            self.model = data.model;
        }
        function Location(data) {
            var self = this;
            data = data || {};
            self.cityId = data.cityId;
            self.cityName = data.cityName;
            self.popularPlaceId = data.popularPlaceId;
            self.popularPlace = data.popularPlace;
            self.exectLocation = data.exectLocation;
        }
        var imageUrls = [];
        function adImages(data,adId,imagesCount) {
            var self = this;
            data = data || {};
            self.link = "/Images/Ads/" + adId + '_' + imagesCount + data.imageExtension;// also loop after _
            imageUrls.push(self.link);
        }
        function Tag(data) {
            var self = this;
            data = data || {};
            self.id = data.id;
            self.name = data.name;
            self.info = data.info || "";
            self.followers = data.followers || 0;
        };
        function ad(data) {
            var self = this;

            //slick
            self.images = ko.observableArray(imageUrls);
            self.options = {};
            self.imageIndex = ko.observable(1);

            data = data || {};
            self.title = data.title;
            self.description = ko.observable( data.description);
            self.postedByName = data.postedByName;
            self.postedById = data.postedById;
            self.id = data.id;
            self.time = getTimeAgo(data.time);
            self.loginUserId = data.islogin || "";
            self.loginUserProfileLink = '/Images/Users/p' + self.loginUserId + data.loginUserProfileExtension;
            self.showMobileAd = ko.observable();
            self.showLocation = ko.observable();
            self.showComment = ko.observableArray();
            self.isReported = ko.observable(data.isReported);
            self.isSaved = ko.observable(data.isSaved);
            self.reportedCount = ko.observable(data.reportedCount);
            self.showImages = ko.observable();
            self.views = data.views;
            self.savedCount = ko.observable( data.savedCount );
            self.price = data.price || "";
            self.newBidPrice = ko.observable();
            self.showCarAd = ko.observable();
            self.statusError = "";
            self.isVisible = true;
            if (data.status == "p") {
                self.statusError = "This ad will be visible to public once it is approved by admin";
                if (self.loginUserId != self.postedById) {
                    self.isVisible = false;
                }
                
            }
            self.type = "";
            if (data.type == true) {
                self.type = "For sell";
            } else {
                self.type = "Want to buy";
            }
            self.condition = "";
            if (data.condition == "n") {
                self.condition = "New";
            } else if (data.condition == "u") {
                self.condition = "Used";
            } else if (data.condition == "b") {
                self.condition = "unBoxed";
            }
            //biding
            self.highestBid = ko.observable();
            self.showBidings = ko.observableArray();
            self.isBidingAllowed = false;
            self.placeBid = ko.observable(false);
            self.bidAmount = ko.observable();

            self.showTags = ko.observableArray();
            self.sellerProfile = "/User/Index/" + self.postedById;
            self.placeBidButton = function () {
                if(self.loginUserId){
                    self.placeBid(true);
                } else {
                    toastr.info("You must login to place bid!");
                }
            }
            
            self.deleteBid = function (bid) {
                $.ajax({
                    url: '/api/Electronic/DeleteBid/' + bid.id,
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'POST',
                    success: function (data) {
                        self.showBidings.remove(bid);
                    },
                    error: function () {
                        toastr.error("failed to delete bid. Please refresh page and try again", "Error!");
                    }
                });
            }
            self.postBid = function () {
                var bid = new Biding();
                bid.adId = self.id;
                bid.price = self.newBidPrice();
                bid.time = new Date($.now());
                $.ajax({
                    url: '/api/Electronic/PostBid',
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'POST',
                    data: ko.toJSON(bid),
                    success: function (data) {
                        self.showBidings.push(new Biding(data));
                        self.highestBid ( Math.max.apply(Math, self.showBidings().map(function (o) { return o.price(); })));
                        self.newBidPrice('');
                        $(".sortable-list").sortable({
                            connectWith: ".connectList"
                        }).disableSelection();
                    },
                    error: function () {
                        toastr.error("failed to delete Ad. Please refresh page and try again", "Error!");
                    }
                });
            }
            if (data.isNegotiable == "b") {
                self.isBidingAllowed = true;
            } else if (data.isNegotiable == "y") {
                self.isNegotiable = 'Negotiable';
            } else if (data.isNegotiable == "n") {
                self.isNegotiable = '<strike>Negotiable</strike>';
            }
            if(self.price == "") {
                self.isNegotiable = "";
            }
            if (data.location != null) {
                self.showLocation(new Location(data.location));
            }
            if (data.bid != null) {
                var biding = $.map(data.bid, function (item) { return new Biding(item); });
                self.highestBid ( Math.max.apply(Math, biding.map(function (o) { return o.price(); })));
                self.showBidings(biding);
            }
            if (data.adTags != null) {
                var tags = $.map(data.adTags, function (item) { return new Tag(item); });
                self.showTags(tags);
            }
            
            if (data.mobilead.brand != null) {
                self.showMobileAd ( new mobilead(data.mobilead));
            }
            if (data.laptopad.brand != null) {
                self.showMobileAd ( new mobilead(data.laptopad));
            }
            //if (data.carad != "") {
            //    var mobad = $.map(data.carad, function (item) { return new CarAd(item); });
            //    self.showCarAd(mobad);
            //}
            if (data.comment) {
                var cmt = $.map(data.comment, function (item) { return new comment(item); });
                self.showComment(cmt);
            }
            if (data.adImages) {
                var imagesCount = 1;
                var img = $.map(data.adImages, function (item,ia) { return new adImages(item,data.id,imagesCount++); });
                self.showImages(img);
            }
            self.saveAd = function (ad) {
                $.ajax({
                    url: '/api/User/SaveAd/' + ad.id,
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'POST',
                    success: function (data) {
                        self.savedCount(data.count);
                        if (data.text == "Deleted") {
                            self.isSaved(false);
                            
                        } else {
                            self.isSaved(true);
                        }
                    },
                    error: function () {
                        toastr.error("failed to Save Ad. Please refresh page and try again", "Error!");
                    }
                });
            }
            self.editAd = function (id) {
                if (data.laptopad.brand != null) {
                    window.location.href = "/Electronics/EditLaptopAd/" + id;
                }
                 else if (data.mobilead.brand != null) {
                    window.location.href = "/Electronics/Edit/" + id;
                }
                else  {
                    window.location.href = "/Electronics/EditAd/" + id;
                }
            }
            self.deleteAd = function (id) {
                    swal({
                        title: "Are you sure?",
                        text: "You will not be able to recover this Ad!",
                        type: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#DD6B55",
                        confirmButtonText: "Yes, delete it!",
                        closeOnConfirm: false
                    }, function () {
                        $.ajax({
                            url: '/api/Electronic/DeleteAd/' + id,
                            dataType: "json",
                            contentType: "application/json",
                            cache: false,
                            type: 'POST',
                            success: function (data) {
                                swal("Deleted!", "Your Ad has been deleted.", "success");
                                window.location.href = "/User/Index/"+self.loginUserId;
                            },
                            error: function () {
                                toastr.error("failed to delete Ad. Please refresh page and try again", "Error!");
                            }
                        });
                    });
            }
            self.deleteComment = function (id) {
                $.ajax({
                    url: '/api/Comment/DeleteComment/' + id,
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'POST',
                    // data: ko.toJSON(id),
                    success: function (data) {
                        self.showComment.remove(function (item) {
                            return item.id == id;
                        });
                    },
                    error: function () {
                        toastr.error("failed to delete comment", "Error!");
                    }
                });
            }
            
            self.checkEnter = function (d, e) {
                if (e.keyCode == 13) {
                    self.addcomment();
                }
            }
            
            self.newComment = ko.observable();
            self.addcomment = function () {
                if (self.loginUserId) {
                    var com = new comment();
                    com.adId = self.id;
                    com.description (self.newComment());
                    com.description(com.description().slice(0, -1));
                    if (com.description) {
                        com.time = new Date($.now());
                        $.ajax({
                            url: '/api/Comment/PostComment',
                            dataType: "json",
                            contentType: "application/json",
                            cache: false,
                            type: 'POST',
                            data: ko.toJSON(com),
                            success: function (data) {
                                self.showComment.push(new comment(data));
                                self.newComment('');
                            },
                            error: function (jqXHR, status, thrownError) {
                                toastr.error("failed to post comment", "Error");
                            }
                        });
                    }
                } else {
                    var currentPage = $("#currentPage").val();
                    toastr.options.onclick = function () { window.location.href = '/Account/Login?returnUrl=' + currentPage }
                    toastr.info("You must be login to post comment", "Oops!");
                }
            }
            
        }
        function Report() {
            var self = this;
            self.selectedVal = ko.observable("spam");
            self.reportText = "";
            self.report = function () {
                if ($("#loginUserId").val()) {
                    var data = {
                        adId: myAdId,
                        details: self.reportText,
                        type: self.selectedVal(),
                    };
                    $.ajax({
                        url: '/api/Electronic/reportAd',
                        dataType: "json",
                        contentType: "application/json",
                        cache: false,
                        type: 'POST',
                        data: ko.toJSON(data),
                        success: function (data) {
                            $("#report").modal('hide');
                            toastr.info("Our team can contact you for details", "Thanks for feedback!");
                        },
                        error: function (xhr, status, error) {
                            var err = eval("(" + xhr.responseText + ")");
                            toastr.info(err.Message);
                            $("#report").modal('hide');
                        }
                    })
                } else {
                    toastr.info("You must be login to report this ad", "Na na!");
                }
            }
        }
        function viewModel() {
            var self = this;
            treeModel();
            AccountViewModel();
            ChatViewModel();
            Report();
            

            self.showAds = ko.observableArray();
            self.error = ko.observable();
            self.loadad = function () {
                var adId = myAdId;
                url_address = '/api/Electronic/GetAd/' + adId;
                $.ajax({
                    url: url_address,
                    dataType: "json",
                    type: 'GET'
                })
                .done(function (data) {
                    var mappedads = $.map(data, function (item) { return new ad(item); });
                    self.showAds(mappedads);
                    $(".sortable-list").sortable({
                        connectWith: ".connectList"
                    }).disableSelection();
                })
                .fail(function () {
                    self.error ( "This ad has been deleted or is unavailable. " );
                });
            }
            
            self.loadad();
            return self;
        }

        function getTimeAgo(varDate) {
            if (varDate) {
                return $.timeago(varDate.toString().slice(-1) == 'Z' ? varDate : varDate + 'Z');
            }
            else {
                return '';
            }
        }
        ko.bindingHandlers.jqAutoresize = {
            init: function (element, valueAccessor, aBA, vm) {
                if (!$(element).hasClass('msgTextArea')) {
                    $(element).css('height', '1em');
                }
                $(element).autosize();
            }
        };
        ko.bindingHandlers.iCheck = { // integrating icheck plugin using bh
            init: function (element, valueAccessor) {
                //initialize icheck to the element
                $(element).iCheck({
                    radioClass: 'iradio_square-green'
                });
                $(element).on('ifChecked', function (event) {
                    var observable = valueAccessor();
                    observable.checked(event.target.defaultValue); //assigning selected value
                });
            }
        };
        ko.bindingHandlers.slick = (function () {
            var createImageDiv = function (imgUrl) {

                $a = $('<a>');
                $a.attr('href', imgUrl);
                //$a.attr('data-gallery', '#blueimp-gallery');
                $a.attr('target', '_blank');
                $div = $('<div>');
                $image = $('<img>');
                $image.attr('src', imgUrl);
                // $div.append($image);
                $a.append($image);
                $div.append($a);
                return $div;
            };

            // Initializes the carousel
            var init = function (element, valueAccessor, allBindingsAccessor) {
                // Clears the div
                $(element).empty();
                // Creates the inner divs with images
                var images = ko.unwrap(valueAccessor());
                if (images) {
                    images.forEach(function (imgUrl) {
                        $(element).append(createImageDiv(imgUrl));
                    });
                }

                // try to recover slickOptions
                var options = allBindingsAccessor().slickOptions || {};

                // Initialize slick on the div, with provided options
                $(element).slick(options);

                //handle disposal, if KO removes the element
                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    $(element).slick('unslick');
                });

                // check if there is slickIndex
                var slickIndex = allBindingsAccessor().slickIndex;
                if (slickIndex) {
                    $(element).slick('slickGoTo', ko.unwrap(slickIndex));
                }
                // If it's obervable, subscribe to its changes
                if (ko.isObservable(slickIndex)) {
                    slickIndex.subscribe(function (idx) {
                        $(element).slick('slickGoTo', idx);
                    });
                }
                // It if's writable observable, update when slick current index changes
                if (ko.isWritableObservable(slickIndex)) {
                    $(element).on('afterChange', function (evt, slick, pos) {
                        slickIndex(pos);
                    })
                }

                // Check if the array of images is an observable array
                var imagesArray = valueAccessor();
                // If it's observable array, subscribe to changes
                if (ko.isObservable(imagesArray) && 'destroyAll' in imagesArray) {
                    imagesArray.subscribe(function (changes) {
                        console.log(changes);
                        if (changes) {
                            changes.forEach(function (change) {
                                if (change.status == 'added') {
                                    // Add new img div at index
                                    var imgDiv = createImageDiv(change.value)[0];
                                    var index = change.index;
                                    var slideCount = $(element).slick('getSlick').slideCount;
                                    // if the index is out of range (which can happen 
                                    // with push, and splice), include at the end
                                    var addBefore = true;
                                    if (index >= slideCount) {
                                        index = slideCount - 1;
                                        addBefore = false;
                                    }
                                    $(element).slick('slickAdd', imgDiv, index, addBefore);
                                } else if (change.status == 'deleted') {
                                    // delete img div at index
                                    $(element).slick('slickRemove', change.index);
                                }
                            });
                        }
                    }, null, 'arrayChange');
                } // if observable array
            }

            //update the control when the view model changes
            var update = function (element, valueAccessor) {
                var images = ko.unwrap(valueAccessor());
                // Do something to update the content
                console.log('update');
            }

            return { init: init, update: update };
        })();

        $(function () {
            
            toastr.options = {
                closeButton: true,
                progressBar: true,
                preventDuplicates: true,
                positionClass: 'toast-top-right',
                onclick: null
            };
            ko.applyBindings(new viewModel());
            $.connection.hub.start().done();
            //commentsFile();
            
        });

    </script>
}
