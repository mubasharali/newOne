@model Inspinia_MVC5_SeedProject.Models.Ad

@{
    Layout = "/Views/Shared/_Layout_Without_Signalr.cshtml";
    ViewBag.Title = "Edit";
}
<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-sm-4">
        <h2>Edit</h2>
        <ol class="breadcrumb">
            @*<li>
                @Html.ActionLink("List", "Index")
            </li>*@
            <li class="active">
                <strong>Edit</strong>
            </li>
        </ol>
    </div>
</div>


<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-md-6">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Edit Ad</h5>
                </div>
                <div class="ibox-content">
                    <form id="my-awesome-dropzone" data-bind="dropzone: { url: '/Electronics/FileUploadHandler' }"method="post" enctype="multipart/form-data">
                        <h2>Add Images</h2>
                        <div id="dropzonePreview" class="dz-default dz-message">
                        </div>
                    </form>
                    <br />
                    @using (Html.BeginForm("Update", "Electronics", FormMethod.Post, new { id = "form" }))
                    {
                        @Html.AntiForgeryToken()

                        <div class="form-horizontal">
                            @Html.ValidationSummary(true)
                            
                            <div id="mobileId">

                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-2">Select Brand <span class="req">*</span></label>
                                <div class="col-md-10">
                                    <select id="select-brand" required class="demo-default" name="brand" data-bind="options: availableBrands,
                       value: selectedBrand,
                       optionsCaption: 'Choose brand...'"></select>

                                </div>
                            </div>
                            <div data-bind="with:selectedBrand">
                                <div class="form-group">
                                    <label class="control-label col-md-2">Select Model<span class="req">*</span></label>
                                    <div class="col-md-10">
                                        <select id="select-model" required class="demo-default" name="model" data-bind="options: $parent.availableModels,
                       value: $parent.selectedModel,
                       optionsCaption: 'Choose model...'"></select>
                                    </div>
                                    @*<div data-bind="text:$parent.selectedModel"></div>*@
                                </div>
                            </div>

                                <div class="form-group">
                                    <label class="control-label col-md-2" >Color<span class="req">*</span><span data-bind="text:selectedColor"></span></label>
                                    <div class="col-md-10">
                                        <select id="select-color" required class="demo-default" name="color" data-bind="options: availableColors,
                       value: selectedColor,
                       optionsCaption: 'Choose color...'"></select>
                                    </div>
                                </div>

                            <div class="form-group">
                                <label class="control-label col-md-2">Number of sims<span class="req">*</span></label>
                                <div class="col-md-10">
                                    <select id="select-sims" required class="demo-default" name="sims" data-bind="options: availableSims,
                       value: selectedSim,
                       optionsCaption: 'Choose number of sim...'"></select>
                                </div>
                            </div>
                            @Html.Partial("~/Views/Shared/_EditAd.cshtml")

                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" value="Update" class="btn btn-primary" />
                                    <a href="/Electronics/Details/@Model.Id" class="btn btn-white">Cancel</a>
                                </div>
                            </div>

                        </div>
                    }

                </div>
            </div>
        </div>
    </div>
</div>



@section Styles {

    @Styles.Render("~/plugins/toastrStyles")
    @Styles.Render("~/Content/plugins/iCheck/iCheckStyles")
    @Styles.Render("~/Scripts/plugins/jquery-ui/jqueryuiStyles")
    @Styles.Render("~/scripts/selectizeStyles")
@Styles.Render("~/bundles/myStyles")
@Styles.Render("~/bundles/tagStyles")
@Styles.Render("~/Content/plugins/dropzone/dropZoneStyles")
}

@section Scripts {

    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/plugins/validate")
    @Scripts.Render("~/plugins/knockout")
    @Scripts.Render("~/plugins/iCheck")
    @Scripts.Render("~/scripts/selectize")
    @Scripts.Render("~/plugins/toastr")
    @Scripts.Render("~/plugins/autosize")
@Scripts.Render("~/plugins/dropZone")
    <script type="text/javascript">

        function ViewModel() {
            var self = this;
            self.conditionChecked = ko.observable(false);
            self.typeValue = ko.observable("sell");
            self.selectedVal = ko.observable();
            self.selectedVal.subscribe(function (val) {
                if (val == "fixedPrice") {
                    self.isAllowBidingChecked(false);
                    self.isFixPriceChecked(true);
                }
                else {
                    self.isAllowBidingChecked(true);
                    self.isFixPriceChecked(false);
                }
            });

            self.availableSims = ["1", "2", "3", "4", "5"];
            self.selectedSim = ko.observable();
            self.availableColors = ["White","Black","Yellow","Red","Blue","Orange","Purple","Violet","Green"];
            self.selectedColor = "";
            self.availableBrands = ko.observableArray();
            self.selectedBrand = ko.observable();
            self.availableModels = ko.observableArray();
            self.selectedModel = ko.observable();
            self.availableCities = ko.observableArray();
            self.selectedCity = ko.observable();
            self.availablePopularPlaces = ko.observableArray();
            self.selectedPopularPlace = ko.observable();
            self.mobileId = "";
            self.selectedBrandOriginal = "";
            self.selectedModelOriginal = "";
            self.selectedCityOriginal = "";
            self.selectedPopularPlaceOriginal = "";
            self.exectLocation = "";
            self.selectedTags = [];
            var sub = self.selectedBrand.subscribe(function (value) {
                self.loadModels();
            })
            self.isAllowBidingChecked = ko.observable(false);
            self.isFixPriceChecked = ko.observable(false);

            self.loadAd = function () {
                $.ajax({
                    url: '/api/Electronic/GetAd/' + $("#adId").val(),
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    //type: 'POST',
                    success: function (data) {
                        var tags = data[0].adTags;
                        $.each((tags), function (i, item) { self.selectedTags.push(item.name) });
                      //  console.log(self.selectedTags);
                        self.exectLocation = data[0].location.exectLocation;
                        self.selectedCity(data[0].location.cityName);
                        self.selectedCityOriginal = data[0].location.cityName;
                        if (data[0].mobilead.condition == 'u') {
                            self.conditionChecked("used");
                        } else if (data[0].mobilead.condition == 'b') {
                            self.conditionChecked("new");
                        } else if (data[0].mobilead.condition == 'n') {
                            self.conditionChecked("unBoxed");
                        }
                        self.mobileId = data[0].mobilead.id;
                        self.selectedModel(data[0].mobilead.model);
                        self.selectedModelOriginal = self.selectedModel();
                        self.selectedColor = data[0].mobilead.color;
                        self.selectedColor = self.selectedColor.toLowerCase().replace(/\b[a-z]/g, function (letter) {
                            return letter.toUpperCase();
                        });
                     //   alert(self.selectedColor);
                        self.selectedBrand(data[0].mobilead.brand);
                        self.selectedSim(data[0].mobilead.sims);
                        self.selectedBrandOriginal = self.selectedBrand();
                        
                        self.selectedPopularPlaceOriginal = data[0].location.popularPlace;
                        
                        self.selectedCityOriginal = self.selectedCity();
                        
                        $('#select-brand').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 29,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },
                        });
                        $('#select-city').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 39,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },
                        });
                        $('#select-tag').selectize({
                            valueField: 'name',
                            labelField: 'name',
                            searchField: 'name',
                            maxItems: 4,
                            options: self.selectedTags, //not working
                            create: true,
                            render: {
                                option: function (item, escape) {
                                    return '<div>' +
                                        '<span class="title">' +
                                            '<span class="name">' + escape(item.name) + '</span>' +

                                        '</span>' +
                                        '<span class="description">' + escape(item.info) + '</span>' +
                                        '<ul class="meta">' +
                                            '<li class="watchers"><span>' + escape(item.followers) + '</span> followers</li>' +
                                            '<li class="forks"><span>' + escape(item.questions) + '</span> questions asked</li>' +
                                        '</ul>' +
                                    '</div>';
                                }
                            },
                            load: function (query, callback) {
                                if (!query.length) return callback();
                                $.ajax({
                                    url: '/api/Tag/SearchTags?s=' + encodeURIComponent(query),
                                    type: 'POST',
                                    error: function () {
                                        callback();
                                    },
                                    success: function (res) {
                                        callback(res.slice(0, 10));
                                    }
                                });
                            }
                        });
                        if (self.selectedBrandOriginal == self.selectedBrand()) {
                            self.selectedModel(self.selectedModelOriginal);
                        }
                        if (self.selectedCityOriginal == self.selectedCity()) {
                            self.selectedPopularPlace(self.selectedPopularPlaceOriginal);
                        }
                        $('#select-color').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 19,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },
                        });
                        alert(self.selectedColor);
                        
                        $('#select-sims').selectize({
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },
                        });
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load data. Please refresh page and try again", "Error");
                    }
                });
            }

            self.loadBrands = function () {
                $.ajax({
                    url: '/api/Electronic/GetBrands',
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'POST',
                    success: function (data) {
                        $.each((data), function (i, item) { self.availableBrands.push(item) });
                        
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load Brands.Please refresh page and try again", "Error");
                    }
                });
            }
            
            self.loadModels = function () {
                self.availableModels.removeAll();
                $.ajax({
                    url: '/api/Electronic/GetModels?brand=' + self.selectedBrand(),
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'POST',
                    success: function (data) {
                        $.each((data), function (i, item) { self.availableModels.push(item) });
                        if (self.selectedBrandOriginal == self.selectedBrand()) {
                            self.selectedModel(self.selectedModelOriginal);
                        }
                        $('#select-model').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 29,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },
                        });
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load Models.Please refresh page and try again", "Error");
                    }
                });
            }

            //location
            
            self.loadCities = function () {
                $.ajax({
                    url: '/api/Location/GetCities',
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'GET',
                    success: function (data) {
                        $.each((data), function (i, item) { self.availableCities.push(item) });
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load Cities.Please refresh page and try again", "Error");
                    }
                });
            }
            self.loadPopularPlaces = function () {
                self.availablePopularPlaces.removeAll();
                $.ajax({
                    url: '/api/Location/GetPopularPlaces?city=' + self.selectedCity(),
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'GET',
                    success: function (data) {
                        $.each((data), function (i, item) { self.availablePopularPlaces.push(item) });
                        if (self.selectedCityOriginal == self.selectedCity()) {
                            self.selectedPopularPlace(self.selectedPopularPlaceOriginal);
                        }
                        $('#select-popularPlace').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 49,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },
                        });
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load Famous Places.Please refresh page and try again", "Error");
                    }
                });
            }
            
            var sub = self.selectedCity.subscribe(function (value) {
                self.loadPopularPlaces();
            })
            self.loadCities();
            self.loadBrands();
            
            self.loadAd();
            
        }
        ko.bindingHandlers.jqAutoresize = {
            init: function (element, valueAccessor, aBA, vm) {
                if (!$(element).hasClass('msgTextArea')) {
                    $(element).css('height', '1em');
                }
                $(element).autosize();
            }
        };
        var adId = $("#adId").val();
        function Images(data,i) {
            var self = this;
            data = data || {};
           self.name =  adId+"_" + i + data.extension;
           self.size = data.size;
        }
        var images = [];
        //for (var i = 0 ; i < 30 ; i++) {
        //    images[i] = new Images();
        //}
        var loadImages = function () {
            $.ajax({
                url: '/api/Electronic/getAdImages?id=' + adId,
                dataType: "json",
                contentType: "application/json",
                cache: false,
                type: 'GET',
                success: function (data) {
                    var i = 1;
                    var mappedads = $.map(data, function (item) { return new Images(item,i++); });
                    images = mappedads;
                   // $.each((data), function (item) { images.push(new Images(item)) });
                },
                error: function (jqXHR, status, thrownError) {
                    toastr.error("failed to load images.Please refresh page", "Error");
                }
            });
        }
        
        loadImages();
        ko.bindingHandlers.dropzone = {
            init: function (element, valueAccessor) {
                var value = ko.unwrap(valueAccessor());

                var options = {
                    maxFileSize: 15,
                    uploadMultiple: true,
                    parallelUploads: 100,
                    maxFiles: 30,
                    addRemoveLinks: true,
                    acceptedFiles: ".jpeg,.jpg,.png,.gif",
                    init: function () {
                        var myDropzone = this;
                        this.on("success", function (file, serverFileName) {
                            fileList = [];
                            i = 1;
                            var abc = $.map(serverFileName, function (item) { return (item); });
                            $.each(abc, function (index, value) {
                                fileList[i] = { "fileName": value, "fileId": i++ };
                            })
                        });
                        if (images) {
                            for (i = 0; i < images.length; i++) {
                                myDropzone.emit("addedfile", images[i]);
                                myDropzone.emit("thumbnail", images[i], "/Images/Ads/");
                                myDropzone.emit("complete", images[i]);
                            }
                        }
                    }
                };

                $.extend(options, value);

                $(element).addClass('dropzone');
                new Dropzone(element, options); 
            }
        };
        ko.bindingHandlers.iCheck = { // integrating icheck plugin using bh
            init: function (element, valueAccessor) {
                //initialize icheck to the element
                $(element).iCheck({
                    radioClass: 'iradio_square-green'
                });
                $(element).on('ifChecked', function (event) {
                    var observable = valueAccessor();
                    observable.checked(event.target.defaultValue); //assigning selected value
                });
            }
        };

        $(document).ready(function () {
            ko.applyBindings(new ViewModel);

            Selectize.define('inputMaxlength', function (options) {
                var self = this;
                this.setup = (function () {
                    var original = self.setup;
                    return function () {
                        original.apply(this, arguments);
                        this.$control_input.attr('maxlength', this.settings.inputMaxlength);
                    };
                })();
            });
            
            $("#form").validate({
                ignore: ':hidden:not([class~=selectized]),:hidden > .selectized, .selectize-control .selectize-input input',
                rules: {
                    title: {
                        required: true,
                        maxlength: 50,
                        minlength: 15
                    },
                    company: {
                        required: true,
                        maxlength: 15
                    },
                    model: {
                        required: true,
                        maxlength: 20
                    },
                    description: {
                        required: true,
                        minlength: 25,
                        maxlength: 1000
                    },
                    color: {
                        required: true,
                        maxlength: 20
                    },
                    price: {
                        number: true
                    },
                    abc: {
                        required: true
                    }
                }
            });
            $('.i-check').iCheck({
                checkboxClass: 'icheckbox_square-green',
                radioClass: 'iradio_square-green',
            });

        });
    </script>
}

